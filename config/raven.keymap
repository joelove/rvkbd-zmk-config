/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk { quick-release; };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none          &kp Q  &kp W  &kp F  &kp P  &kp B           &kp J  &kp L      &kp U      &kp Y    &kp SINGLE_QUOTE  &none
&kp BACKSPACE  &kp A  &kp R  &kp S  &kp T  &kp G           &kp M  &kp N      &kp E      &kp I    &kp O             &kp ENTER
&none          &kp Z  &kp X  &kp C  &kp D  &kp V           &kp K  &kp H      &kp COMMA  &kp DOT  &kp FSLH          &none
                             &mo 4  &mo 3  &kp LEFT_SHIFT         &kp SPACE  &mo 1      &mo 2
            >;
        };

        symbols {
            bindings = <
&trans     &kp TILDE      &kp AT         &kp HASH           &kp GREATER_THAN  &kp RIGHT_BRACKET      &kp LEFT_BRACKET      &kp LESS_THAN  &kp DOLLAR     &kp PERCENT   &kp CARET        &trans
&kp GRAVE  &kp PIPE       &kp AMPERSAND  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp RIGHT_PARENTHESIS  &kp LEFT_PARENTHESIS  &kp COLON      &kp SEMICOLON  &kp QUESTION  &kp EXCLAMATION  &kp EQUAL
&trans     &kp BACKSLASH  &kp PLUS       &kp ASTERISK       &kp UNDERSCORE    &kp RIGHT_BRACE        &kp LEFT_BRACE        &kp MINUS      &kp COMMA      &kp PERIOD    &kp SLASH        &trans
                                         &kp LS(LA(MINUS))  &kp LA(MINUS)     &kp LA(NUMBER_3)                             &kp LA(N2)     &trans         &trans
            >;
        };

        system_control {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp LC(LG(Q))  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none          &kp LEFT_ARROW        &kp DOWN_ARROW        &kp UP_ARROW       &kp RIGHT_ARROW  &kp TAB
&trans  &trans  &trans  &trans  &trans  &trans  &none          &kp LG(MINUS)         &kp LG(EQUAL)         &kp LG(N0)         &kp C_MUTE       &trans
                        &trans  &trans  &trans                 &trans                &trans                &trans
            >;
        };

        mods_and_num_pad {
            bindings = <
&trans   &none           &none             &none         &none             &none          &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_SUBTRACT  &trans
&kp TAB  &sk LEFT_SHIFT  &sk LEFT_CONTROL  &sk LEFT_ALT  &sk LEFT_COMMAND  &kp LG(SPACE)  &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS      &kp KP_ENTER
&trans   &none           &none             &none         &none             &none          &kp KP_EQUAL     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp TAB          &trans
                                           &trans        &trans            &trans                          &trans           &kp KP_N0        &kp KP_DOT
            >;
        };

        app_control {
            bindings = <
&trans      &kp LS(LC(LA(LG(NUMBER_1))))  &kp LS(LA(LG(SPACE)))  &kp LC(LA(LG(SPACE)))  &kp LA(LG(TAB))    &none   &trans  &trans  &trans  &trans  &trans  &trans
&kp ESCAPE  &kp RS(LC(LA(TILDE)))         &kp LS(LC(LA(Z)))      &kp LC(LA(LG(X)))      &kp LC(LA(LG(C)))  &none   &trans  &trans  &trans  &trans  &trans  &trans
&trans      &kp RS(LC(LA(LG(TILDE))))     &kp LS(LC(LA(LG(Z))))  &kp LC(LA(X))          &kp LC(LA(C))      &none   &trans  &trans  &trans  &trans  &trans  &trans
                                                                 &trans                 &mo 5              &trans          &trans  &trans  &trans
            >;
        };

        bluetooth {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &sys_reset      &sys_reset  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &trans        &trans        &trans        &bt BT_PRV    &bt BT_NXT      &trans      &trans  &trans  &trans  &trans  &trans
&trans      &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &trans      &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &bt BT_CLR_ALL              &trans  &trans  &trans
            >;
        };
    };
};
